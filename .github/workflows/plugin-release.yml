name: Publish to Grafana Marketplace

on:
  workflow_dispatch:
    inputs:
      dev_release:
        description: "Dev release for testing"
        type: boolean
      target_branch:
        description: "Branch to build from"
        type: string
        default: "main"
        required: true

run-name: ${{ inputs.dev_release && 'Dev Release' || 'Release' }} from ${{ inputs.target_branch }} triggered by @${{ github.actor }}

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target_branch }}

      - name: Display build info
        run: |
          echo "Building from branch: ${{ inputs.target_branch }}"
          echo "Dev release mode: ${{ inputs.dev_release }}"
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Current branch: $(git branch --show-current)"

      - name: Read .nvmrc
        id: node_version
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_OUTPUT

      - name: Read go.mod
        id: go_version
        run: echo "GO_VERSION=$(grep '^go ' go.mod | cut -d' ' -f2)" >> $GITHUB_OUTPUT

      - name: Read package.json version
        id: package_version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.node_version.outputs.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go_version.outputs.GO_VERSION }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run unit tests
        if: ${{ !inputs.dev_release }}
        run: yarn run test

      - name: Run playwright tests
        if: ${{ !inputs.dev_release }}
        run: yarn run test:e2e

      - name: Build plugin
        uses: grafana/plugin-actions/build-plugin@main
        with:
          # see https://grafana.com/developers/plugin-tools/publish-a-plugin/sign-a-plugin#generate-an-access-policy-token to generate it
          # save the value in your repository secrets
          # NOTE: This action only builds and packages the plugin - it does NOT commit or modify the repository
          policy_token: ${{ secrets.GRAFANA_ACCESS_POLICY_TOKEN_FOR_SIGNING }}
          attestation: true
          use_changelog_generator: true

      # The build-plugin action automatically creates and uploads the zip file
      # No additional packaging or upload steps needed
